// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
}
model User {
  id                 String   @id @default(cuid())

  username           String   @unique
  role               Role     @default(user)
  password           String
  profileImage       String?

  totalMoviesWatched Int      @default(0)
  averageRating      Float    @default(0.0)

  favoriteGenre      String?

  watchedMovies      WatchedMovie[]
  comments           Comment[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Movie {
  id             String   @id @default(cuid())

  title          String
  description    String
  releaseYear    Int
  director       String
  duration       String
  posterUrl      String
  genres         String[]

  averageRating  Float    @default(0.0)

  comments       Comment[]
  watchedBy      WatchedMovie[]
}

model WatchedMovie {
  id        String @id @default(cuid())

  user      User   @relation(fields: [userId], references: [id])
  userId    String

  movie     Movie  @relation(fields: [movieId], references: [id])
  movieId   String

  watchDate DateTime

  rating    Int    @default(0)
  comments  Comment[]

  @@unique([userId, movieId])
}

model Comment {
  id        String  @id @default(cuid())

  movie     Movie   @relation(fields: [movieId], references: [id])
  movieId   String

  userId    String
  user      User    @relation(fields: [userId], references: [id])

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  text      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
